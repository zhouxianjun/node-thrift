//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
RoleStruct = module.exports.RoleStruct = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.pname = null;
  this.create_date = null;
  this.update_date = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.pname !== undefined && args.pname !== null) {
      this.pname = args.pname;
    }
    if (args.create_date !== undefined && args.create_date !== null) {
      this.create_date = args.create_date;
    }
    if (args.update_date !== undefined && args.update_date !== null) {
      this.update_date = args.update_date;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
RoleStruct.prototype = {};
RoleStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.create_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.update_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleStruct.prototype.write = function(output) {
  output.writeStructBegin('RoleStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I64, 3);
    output.writeI64(this.pid);
    output.writeFieldEnd();
  }
  if (this.pname !== null && this.pname !== undefined) {
    output.writeFieldBegin('pname', Thrift.Type.STRING, 4);
    output.writeString(this.pname);
    output.writeFieldEnd();
  }
  if (this.create_date !== null && this.create_date !== undefined) {
    output.writeFieldBegin('create_date', Thrift.Type.I64, 5);
    output.writeI64(this.create_date);
    output.writeFieldEnd();
  }
  if (this.update_date !== null && this.update_date !== undefined) {
    output.writeFieldBegin('update_date', Thrift.Type.I64, 6);
    output.writeI64(this.update_date);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 7);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

